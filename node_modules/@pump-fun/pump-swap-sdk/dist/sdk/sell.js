"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/sdk/sell.ts
var sell_exports = {};
__export(sell_exports, {
  sellBaseInputInternal: () => sellBaseInputInternal,
  sellQuoteInputInternal: () => sellQuoteInputInternal
});
module.exports = __toCommonJS(sell_exports);
var import_bn3 = __toESM(require("bn.js"));

// src/sdk/util.ts
var import_bn2 = __toESM(require("bn.js"));
var import_anchor = require("@coral-xyz/anchor");

// src/sdk/pda.ts
var import_web3 = require("@solana/web3.js");
var import_bn = __toESM(require("bn.js"));
var import_spl_token = require("@solana/spl-token");
var PUMP_AMM_PROGRAM_ID = "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA";
var PUMP_AMM_PROGRAM_ID_PUBKEY = new import_web3.PublicKey(PUMP_AMM_PROGRAM_ID);
var PUMP_PROGRAM_ID = "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P";
var PUMP_PROGRAM_ID_PUBKEY = new import_web3.PublicKey(PUMP_PROGRAM_ID);

// src/sdk/util.ts
function ceilDiv(a, b) {
  if (b.isZero()) {
    throw new Error("Cannot divide by zero.");
  }
  return a.add(b.subn(1)).div(b);
}
function fee(amount, basisPoints) {
  return ceilDiv(amount.mul(basisPoints), new import_bn2.default(1e4));
}

// src/sdk/sell.ts
var import_web32 = require("@solana/web3.js");
function sellBaseInputInternal(base, slippage, baseReserve, quoteReserve, lpFeeBps, protocolFeeBps, coinCreatorFeeBps, coinCreator) {
  if (baseReserve.isZero() || quoteReserve.isZero()) {
    throw new Error(
      "Invalid input: 'baseReserve' or 'quoteReserve' cannot be zero."
    );
  }
  const quoteAmountOut = quoteReserve.mul(base).div(baseReserve.add(base));
  const lpFee = fee(quoteAmountOut, lpFeeBps);
  const protocolFee = fee(quoteAmountOut, protocolFeeBps);
  const coinCreatorFee = import_web32.PublicKey.default.equals(coinCreator) ? new import_bn3.default(0) : fee(quoteAmountOut, coinCreatorFeeBps);
  const finalQuote = quoteAmountOut.sub(lpFee).sub(protocolFee).sub(coinCreatorFee);
  if (finalQuote.isNeg()) {
    throw new Error("Fees exceed total output; final quote is negative.");
  }
  const precision = new import_bn3.default(1e9);
  const slippageFactorFloat = (1 - slippage / 100) * 1e9;
  const slippageFactor = new import_bn3.default(Math.floor(slippageFactorFloat));
  const minQuote = finalQuote.mul(slippageFactor).div(precision);
  return {
    uiQuote: finalQuote,
    // actual tokens user receives after fees
    minQuote,
    // minimum acceptable tokens after applying slippage
    internalQuoteAmountOut: quoteAmountOut
  };
}
var MAX_FEE_BASIS_POINTS = new import_bn3.default(1e4);
function calculateQuoteAmountOut(userQuoteAmountOut, lpFeeBasisPoints, protocolFeeBasisPoints, coinCreatorFeeBasisPoints) {
  const totalFeeBasisPoints = lpFeeBasisPoints.add(protocolFeeBasisPoints).add(coinCreatorFeeBasisPoints);
  const denominator = MAX_FEE_BASIS_POINTS.sub(totalFeeBasisPoints);
  return ceilDiv(userQuoteAmountOut.mul(MAX_FEE_BASIS_POINTS), denominator);
}
function sellQuoteInputInternal(quote, slippage, baseReserve, quoteReserve, lpFeeBps, protocolFeeBps, coinCreatorFeeBps, coinCreator) {
  if (baseReserve.isZero() || quoteReserve.isZero()) {
    throw new Error(
      "Invalid input: 'baseReserve' or 'quoteReserve' cannot be zero."
    );
  }
  if (quote.gt(quoteReserve)) {
    throw new Error(
      "Cannot receive more quote tokens than the pool quote reserves."
    );
  }
  const rawQuote = calculateQuoteAmountOut(
    quote,
    lpFeeBps,
    protocolFeeBps,
    import_web32.PublicKey.default.equals(coinCreator) ? new import_bn3.default(0) : coinCreatorFeeBps
  );
  if (rawQuote.gte(quoteReserve)) {
    throw new Error(
      "Invalid input: Desired quote amount exceeds available reserve."
    );
  }
  const baseAmountIn = ceilDiv(
    baseReserve.mul(rawQuote),
    quoteReserve.sub(rawQuote)
  );
  const precision = new import_bn3.default(1e9);
  const slippageFactorFloat = (1 - slippage / 100) * 1e9;
  const slippageFactor = new import_bn3.default(Math.floor(slippageFactorFloat));
  const minQuote = quote.mul(slippageFactor).div(precision);
  return {
    internalRawQuote: rawQuote,
    base: baseAmountIn,
    // amount of base tokens required to get the desired quote
    minQuote
    // minimum acceptable tokens after applying slippage
  };
}
