"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/sdk/pumpAmmInternal.ts
var pumpAmmInternal_exports = {};
__export(pumpAmmInternal_exports, {
  POOL_ACCOUNT_NEW_SIZE: () => POOL_ACCOUNT_NEW_SIZE,
  PumpAmmInternalSdk: () => PumpAmmInternalSdk
});
module.exports = __toCommonJS(pumpAmmInternal_exports);
var import_bn7 = __toESM(require("bn.js"));
var import_web34 = require("@solana/web3.js");

// src/sdk/pda.ts
var import_web3 = require("@solana/web3.js");
var import_bn = __toESM(require("bn.js"));
var import_spl_token = require("@solana/spl-token");
var PUMP_AMM_PROGRAM_ID = "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA";
var PUMP_AMM_PROGRAM_ID_PUBKEY = new import_web3.PublicKey(PUMP_AMM_PROGRAM_ID);
var PUMP_PROGRAM_ID = "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P";
var PUMP_PROGRAM_ID_PUBKEY = new import_web3.PublicKey(PUMP_PROGRAM_ID);
function globalConfigPda(programId = PUMP_AMM_PROGRAM_ID_PUBKEY) {
  return import_web3.PublicKey.findProgramAddressSync(
    [Buffer.from("global_config")],
    programId
  );
}
function poolPda(index, owner, baseMint, quoteMint, programId = PUMP_AMM_PROGRAM_ID_PUBKEY) {
  return import_web3.PublicKey.findProgramAddressSync(
    [
      Buffer.from("pool"),
      new import_bn.default(index).toArrayLike(Buffer, "le", 2),
      owner.toBuffer(),
      baseMint.toBuffer(),
      quoteMint.toBuffer()
    ],
    programId
  );
}
function lpMintPda(pool, programId = PUMP_AMM_PROGRAM_ID_PUBKEY) {
  return import_web3.PublicKey.findProgramAddressSync(
    [Buffer.from("pool_lp_mint"), pool.toBuffer()],
    programId
  );
}

// src/sdk/pumpAmmInternal.ts
var import_spl_token2 = require("@solana/spl-token");

// src/sdk/deposit.ts
var import_bn2 = __toESM(require("bn.js"));
function depositToken0Internal(token0, slippage, token0Reserve, token1Reserve, totalLpTokens) {
  if (slippage < 0 || slippage > 100) {
    throw new Error("Slippage must be between 0 and 100 (0% to 100%)");
  }
  const token1 = token0.mul(token1Reserve).div(token0Reserve);
  const slippageFactor = new import_bn2.default((1 + slippage / 100) * 1e9);
  const maxToken0 = token0.mul(slippageFactor).div(new import_bn2.default(1e9));
  const maxToken1 = token1.mul(slippageFactor).div(new import_bn2.default(1e9));
  const lpToken = token0.mul(totalLpTokens).div(token0Reserve);
  return {
    token1,
    lpToken,
    maxToken0,
    maxToken1
  };
}

// src/sdk/withdraw.ts
var import_bn3 = __toESM(require("bn.js"));
function withdrawInternal(lpAmount, slippage, baseReserve, quoteReserve, totalLpTokens) {
  if (lpAmount.isZero() || totalLpTokens.isZero()) {
    throw new Error("LP amount or total LP tokens cannot be zero.");
  }
  const base = baseReserve.mul(lpAmount).div(totalLpTokens);
  const quote = quoteReserve.mul(lpAmount).div(totalLpTokens);
  const scaleFactor = new import_bn3.default(1e9);
  const slippageFactor = new import_bn3.default((1 - slippage / 100) * 1e9);
  const minBase = base.mul(slippageFactor).div(scaleFactor);
  const minQuote = quote.mul(slippageFactor).div(scaleFactor);
  return {
    base,
    quote,
    minBase,
    minQuote
  };
}

// src/sdk/buy.ts
var import_bn5 = __toESM(require("bn.js"));

// src/sdk/util.ts
var import_bn4 = __toESM(require("bn.js"));
var import_anchor = require("@coral-xyz/anchor");

// src/idl/pump_amm.json
var pump_amm_default = {
  address: "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA",
  metadata: {
    name: "pump_amm",
    version: "0.1.0",
    spec: "0.1.0",
    description: "Created with Anchor"
  },
  instructions: [
    {
      name: "buy",
      discriminator: [102, 6, 61, 18, 1, 218, 235, 234],
      accounts: [
        {
          name: "pool"
        },
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "global_config"
        },
        {
          name: "base_mint",
          relations: ["pool"]
        },
        {
          name: "quote_mint",
          relations: ["pool"]
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "pool_base_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "protocol_fee_recipient"
        },
        {
          name: "protocol_fee_recipient_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "protocol_fee_recipient"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "base_token_program"
        },
        {
          name: "quote_token_program"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        },
        {
          name: "coin_creator_vault_ata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "coin_creator_vault_authority"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "coin_creator_vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  99,
                  114,
                  101,
                  97,
                  116,
                  111,
                  114,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool.coin_creator",
                account: "Pool"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "base_amount_out",
          type: "u64"
        },
        {
          name: "max_quote_amount_in",
          type: "u64"
        }
      ]
    },
    {
      name: "collect_coin_creator_fee",
      discriminator: [160, 57, 89, 42, 181, 139, 43, 66],
      accounts: [
        {
          name: "quote_mint"
        },
        {
          name: "quote_token_program"
        },
        {
          name: "coin_creator",
          signer: true
        },
        {
          name: "coin_creator_vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  99,
                  114,
                  101,
                  97,
                  116,
                  111,
                  114,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "coin_creator"
              }
            ]
          }
        },
        {
          name: "coin_creator_vault_ata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "coin_creator_vault_authority"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "coin_creator_token_account",
          writable: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "create_config",
      discriminator: [201, 207, 243, 114, 75, 111, 47, 189],
      accounts: [
        {
          name: "admin",
          writable: true,
          signer: true,
          address: "8LWu7QM2dGR1G8nKDHthckea57bkCzXyBTAKPJUBDHo8"
        },
        {
          name: "global_config",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "lp_fee_basis_points",
          type: "u64"
        },
        {
          name: "protocol_fee_basis_points",
          type: "u64"
        },
        {
          name: "protocol_fee_recipients",
          type: {
            array: ["pubkey", 8]
          }
        },
        {
          name: "coin_creator_fee_basis_points",
          type: "u64"
        }
      ]
    },
    {
      name: "create_pool",
      discriminator: [233, 146, 209, 142, 207, 104, 64, 188],
      accounts: [
        {
          name: "pool",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 111, 108]
              },
              {
                kind: "arg",
                path: "index"
              },
              {
                kind: "account",
                path: "creator"
              },
              {
                kind: "account",
                path: "base_mint"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ]
          }
        },
        {
          name: "global_config"
        },
        {
          name: "creator",
          writable: true,
          signer: true
        },
        {
          name: "base_mint"
        },
        {
          name: "quote_mint"
        },
        {
          name: "lp_mint",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "user_pool_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "creator"
              },
              {
                kind: "account",
                path: "token_2022_program"
              },
              {
                kind: "account",
                path: "lp_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "pool_base_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "pool"
              },
              {
                kind: "account",
                path: "base_token_program"
              },
              {
                kind: "account",
                path: "base_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "pool"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_2022_program",
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "base_token_program"
        },
        {
          name: "quote_token_program"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "index",
          type: "u16"
        },
        {
          name: "base_amount_in",
          type: "u64"
        },
        {
          name: "quote_amount_in",
          type: "u64"
        },
        {
          name: "coin_creator",
          type: "pubkey"
        }
      ]
    },
    {
      name: "deposit",
      discriminator: [242, 35, 198, 137, 82, 225, 242, 182],
      accounts: [
        {
          name: "pool",
          writable: true
        },
        {
          name: "global_config"
        },
        {
          name: "user",
          signer: true
        },
        {
          name: "base_mint",
          relations: ["pool"]
        },
        {
          name: "quote_mint",
          relations: ["pool"]
        },
        {
          name: "lp_mint",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "user_pool_token_account",
          writable: true
        },
        {
          name: "pool_base_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_2022_program",
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "lp_token_amount_out",
          type: "u64"
        },
        {
          name: "max_base_amount_in",
          type: "u64"
        },
        {
          name: "max_quote_amount_in",
          type: "u64"
        }
      ]
    },
    {
      name: "disable",
      discriminator: [185, 173, 187, 90, 216, 15, 238, 233],
      accounts: [
        {
          name: "admin",
          signer: true,
          relations: ["global_config"]
        },
        {
          name: "global_config",
          writable: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "disable_create_pool",
          type: "bool"
        },
        {
          name: "disable_deposit",
          type: "bool"
        },
        {
          name: "disable_withdraw",
          type: "bool"
        },
        {
          name: "disable_buy",
          type: "bool"
        },
        {
          name: "disable_sell",
          type: "bool"
        }
      ]
    },
    {
      name: "extend_account",
      discriminator: [234, 102, 194, 203, 150, 72, 62, 229],
      accounts: [
        {
          name: "account",
          writable: true
        },
        {
          name: "user",
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "sell",
      discriminator: [51, 230, 133, 164, 1, 127, 131, 173],
      accounts: [
        {
          name: "pool"
        },
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "global_config"
        },
        {
          name: "base_mint",
          relations: ["pool"]
        },
        {
          name: "quote_mint",
          relations: ["pool"]
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "pool_base_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "protocol_fee_recipient"
        },
        {
          name: "protocol_fee_recipient_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "protocol_fee_recipient"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "base_token_program"
        },
        {
          name: "quote_token_program"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        },
        {
          name: "coin_creator_vault_ata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "coin_creator_vault_authority"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "coin_creator_vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  99,
                  114,
                  101,
                  97,
                  116,
                  111,
                  114,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool.coin_creator",
                account: "Pool"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "base_amount_in",
          type: "u64"
        },
        {
          name: "min_quote_amount_out",
          type: "u64"
        }
      ]
    },
    {
      name: "set_coin_creator",
      docs: [
        "Sets Pool::coin_creator from Metaplex metadata creator or BondingCurve::creator"
      ],
      discriminator: [210, 149, 128, 45, 188, 58, 78, 175],
      accounts: [
        {
          name: "pool",
          writable: true
        },
        {
          name: "metadata",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [109, 101, 116, 97, 100, 97, 116, 97]
              },
              {
                kind: "const",
                value: [
                  11,
                  112,
                  101,
                  177,
                  227,
                  209,
                  124,
                  69,
                  56,
                  157,
                  82,
                  127,
                  107,
                  4,
                  195,
                  205,
                  88,
                  184,
                  108,
                  115,
                  26,
                  160,
                  253,
                  181,
                  73,
                  182,
                  209,
                  188,
                  3,
                  248,
                  41,
                  70
                ]
              },
              {
                kind: "account",
                path: "pool.base_mint",
                account: "Pool"
              }
            ],
            program: {
              kind: "const",
              value: [
                11,
                112,
                101,
                177,
                227,
                209,
                124,
                69,
                56,
                157,
                82,
                127,
                107,
                4,
                195,
                205,
                88,
                184,
                108,
                115,
                26,
                160,
                253,
                181,
                73,
                182,
                209,
                188,
                3,
                248,
                41,
                70
              ]
            }
          }
        },
        {
          name: "bonding_curve",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  45,
                  99,
                  117,
                  114,
                  118,
                  101
                ]
              },
              {
                kind: "account",
                path: "pool.base_mint",
                account: "Pool"
              }
            ],
            program: {
              kind: "const",
              value: [
                1,
                86,
                224,
                246,
                147,
                102,
                90,
                207,
                68,
                219,
                21,
                104,
                191,
                23,
                91,
                170,
                81,
                137,
                203,
                151,
                245,
                210,
                255,
                59,
                101,
                93,
                43,
                182,
                253,
                109,
                24,
                176
              ]
            }
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "update_admin",
      discriminator: [161, 176, 40, 213, 60, 184, 179, 228],
      accounts: [
        {
          name: "admin",
          signer: true,
          relations: ["global_config"]
        },
        {
          name: "global_config",
          writable: true
        },
        {
          name: "new_admin"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "update_fee_config",
      discriminator: [104, 184, 103, 242, 88, 151, 107, 20],
      accounts: [
        {
          name: "admin",
          signer: true,
          relations: ["global_config"]
        },
        {
          name: "global_config",
          writable: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "lp_fee_basis_points",
          type: "u64"
        },
        {
          name: "protocol_fee_basis_points",
          type: "u64"
        },
        {
          name: "protocol_fee_recipients",
          type: {
            array: ["pubkey", 8]
          }
        },
        {
          name: "coin_creator_fee_basis_points",
          type: "u64"
        }
      ]
    },
    {
      name: "withdraw",
      discriminator: [183, 18, 70, 156, 148, 109, 161, 34],
      accounts: [
        {
          name: "pool",
          writable: true
        },
        {
          name: "global_config"
        },
        {
          name: "user",
          signer: true
        },
        {
          name: "base_mint",
          relations: ["pool"]
        },
        {
          name: "quote_mint",
          relations: ["pool"]
        },
        {
          name: "lp_mint",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "user_pool_token_account",
          writable: true
        },
        {
          name: "pool_base_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_2022_program",
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "lp_token_amount_in",
          type: "u64"
        },
        {
          name: "min_base_amount_out",
          type: "u64"
        },
        {
          name: "min_quote_amount_out",
          type: "u64"
        }
      ]
    }
  ],
  accounts: [
    {
      name: "BondingCurve",
      discriminator: [23, 183, 248, 55, 96, 216, 172, 96]
    },
    {
      name: "GlobalConfig",
      discriminator: [149, 8, 156, 202, 160, 252, 176, 217]
    },
    {
      name: "Pool",
      discriminator: [241, 154, 109, 4, 17, 177, 109, 188]
    }
  ],
  events: [
    {
      name: "BuyEvent",
      discriminator: [103, 244, 82, 31, 44, 245, 119, 119]
    },
    {
      name: "CollectCoinCreatorFeeEvent",
      discriminator: [232, 245, 194, 238, 234, 218, 58, 89]
    },
    {
      name: "CreateConfigEvent",
      discriminator: [107, 52, 89, 129, 55, 226, 81, 22]
    },
    {
      name: "CreatePoolEvent",
      discriminator: [177, 49, 12, 210, 160, 118, 167, 116]
    },
    {
      name: "DepositEvent",
      discriminator: [120, 248, 61, 83, 31, 142, 107, 144]
    },
    {
      name: "DisableEvent",
      discriminator: [107, 253, 193, 76, 228, 202, 27, 104]
    },
    {
      name: "ExtendAccountEvent",
      discriminator: [97, 97, 215, 144, 93, 146, 22, 124]
    },
    {
      name: "SellEvent",
      discriminator: [62, 47, 55, 10, 165, 3, 220, 42]
    },
    {
      name: "SetBondingCurveCoinCreatorEvent",
      discriminator: [242, 231, 235, 102, 65, 99, 189, 211]
    },
    {
      name: "SetMetaplexCoinCreatorEvent",
      discriminator: [150, 107, 199, 123, 124, 207, 102, 228]
    },
    {
      name: "UpdateAdminEvent",
      discriminator: [225, 152, 171, 87, 246, 63, 66, 234]
    },
    {
      name: "UpdateFeeConfigEvent",
      discriminator: [90, 23, 65, 35, 62, 244, 188, 208]
    },
    {
      name: "WithdrawEvent",
      discriminator: [22, 9, 133, 26, 160, 44, 71, 192]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "FeeBasisPointsExceedsMaximum"
    },
    {
      code: 6001,
      name: "ZeroBaseAmount"
    },
    {
      code: 6002,
      name: "ZeroQuoteAmount"
    },
    {
      code: 6003,
      name: "TooLittlePoolTokenLiquidity"
    },
    {
      code: 6004,
      name: "ExceededSlippage"
    },
    {
      code: 6005,
      name: "InvalidAdmin"
    },
    {
      code: 6006,
      name: "UnsupportedBaseMint"
    },
    {
      code: 6007,
      name: "UnsupportedQuoteMint"
    },
    {
      code: 6008,
      name: "InvalidBaseMint"
    },
    {
      code: 6009,
      name: "InvalidQuoteMint"
    },
    {
      code: 6010,
      name: "InvalidLpMint"
    },
    {
      code: 6011,
      name: "AllProtocolFeeRecipientsShouldBeNonZero"
    },
    {
      code: 6012,
      name: "UnsortedNotUniqueProtocolFeeRecipients"
    },
    {
      code: 6013,
      name: "InvalidProtocolFeeRecipient"
    },
    {
      code: 6014,
      name: "InvalidPoolBaseTokenAccount"
    },
    {
      code: 6015,
      name: "InvalidPoolQuoteTokenAccount"
    },
    {
      code: 6016,
      name: "BuyMoreBaseAmountThanPoolReserves"
    },
    {
      code: 6017,
      name: "DisabledCreatePool"
    },
    {
      code: 6018,
      name: "DisabledDeposit"
    },
    {
      code: 6019,
      name: "DisabledWithdraw"
    },
    {
      code: 6020,
      name: "DisabledBuy"
    },
    {
      code: 6021,
      name: "DisabledSell"
    },
    {
      code: 6022,
      name: "SameMint"
    },
    {
      code: 6023,
      name: "Overflow"
    },
    {
      code: 6024,
      name: "Truncation"
    },
    {
      code: 6025,
      name: "DivisionByZero"
    },
    {
      code: 6026,
      name: "NewSizeLessThanCurrentSize"
    },
    {
      code: 6027,
      name: "AccountTypeNotSupported"
    },
    {
      code: 6028,
      name: "OnlyCanonicalPumpPoolsCanHaveCoinCreator"
    }
  ],
  types: [
    {
      name: "BondingCurve",
      type: {
        kind: "struct",
        fields: [
          {
            name: "virtual_token_reserves",
            type: "u64"
          },
          {
            name: "virtual_sol_reserves",
            type: "u64"
          },
          {
            name: "real_token_reserves",
            type: "u64"
          },
          {
            name: "real_sol_reserves",
            type: "u64"
          },
          {
            name: "token_total_supply",
            type: "u64"
          },
          {
            name: "complete",
            type: "bool"
          },
          {
            name: "creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "BuyEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "base_amount_out",
            type: "u64"
          },
          {
            name: "max_quote_amount_in",
            type: "u64"
          },
          {
            name: "user_base_token_reserves",
            type: "u64"
          },
          {
            name: "user_quote_token_reserves",
            type: "u64"
          },
          {
            name: "pool_base_token_reserves",
            type: "u64"
          },
          {
            name: "pool_quote_token_reserves",
            type: "u64"
          },
          {
            name: "quote_amount_in",
            type: "u64"
          },
          {
            name: "lp_fee_basis_points",
            type: "u64"
          },
          {
            name: "lp_fee",
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee",
            type: "u64"
          },
          {
            name: "quote_amount_in_with_lp_fee",
            type: "u64"
          },
          {
            name: "user_quote_amount_in",
            type: "u64"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "protocol_fee_recipient",
            type: "pubkey"
          },
          {
            name: "protocol_fee_recipient_token_account",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          },
          {
            name: "coin_creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "coin_creator_fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CollectCoinCreatorFeeEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          },
          {
            name: "coin_creator_fee",
            type: "u64"
          },
          {
            name: "coin_creator_vault_ata",
            type: "pubkey"
          },
          {
            name: "coin_creator_token_account",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "CreateConfigEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "lp_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee_recipients",
            type: {
              array: ["pubkey", 8]
            }
          },
          {
            name: "coin_creator_fee_basis_points",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CreatePoolEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "index",
            type: "u16"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "quote_mint",
            type: "pubkey"
          },
          {
            name: "base_mint_decimals",
            type: "u8"
          },
          {
            name: "quote_mint_decimals",
            type: "u8"
          },
          {
            name: "base_amount_in",
            type: "u64"
          },
          {
            name: "quote_amount_in",
            type: "u64"
          },
          {
            name: "pool_base_amount",
            type: "u64"
          },
          {
            name: "pool_quote_amount",
            type: "u64"
          },
          {
            name: "minimum_liquidity",
            type: "u64"
          },
          {
            name: "initial_liquidity",
            type: "u64"
          },
          {
            name: "lp_token_amount_out",
            type: "u64"
          },
          {
            name: "pool_bump",
            type: "u8"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "lp_mint",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "DepositEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "lp_token_amount_out",
            type: "u64"
          },
          {
            name: "max_base_amount_in",
            type: "u64"
          },
          {
            name: "max_quote_amount_in",
            type: "u64"
          },
          {
            name: "user_base_token_reserves",
            type: "u64"
          },
          {
            name: "user_quote_token_reserves",
            type: "u64"
          },
          {
            name: "pool_base_token_reserves",
            type: "u64"
          },
          {
            name: "pool_quote_token_reserves",
            type: "u64"
          },
          {
            name: "base_amount_in",
            type: "u64"
          },
          {
            name: "quote_amount_in",
            type: "u64"
          },
          {
            name: "lp_mint_supply",
            type: "u64"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "user_pool_token_account",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "DisableEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "disable_create_pool",
            type: "bool"
          },
          {
            name: "disable_deposit",
            type: "bool"
          },
          {
            name: "disable_withdraw",
            type: "bool"
          },
          {
            name: "disable_buy",
            type: "bool"
          },
          {
            name: "disable_sell",
            type: "bool"
          }
        ]
      }
    },
    {
      name: "ExtendAccountEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "account",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "current_size",
            type: "u64"
          },
          {
            name: "new_size",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "GlobalConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "admin",
            docs: ["The admin pubkey"],
            type: "pubkey"
          },
          {
            name: "lp_fee_basis_points",
            docs: ["The lp fee in basis points (0.01%)"],
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            docs: ["The protocol fee in basis points (0.01%)"],
            type: "u64"
          },
          {
            name: "disable_flags",
            docs: [
              "Flags to disable certain functionality",
              "bit 0 - Disable create pool",
              "bit 1 - Disable deposit",
              "bit 2 - Disable withdraw",
              "bit 3 - Disable buy",
              "bit 4 - Disable sell"
            ],
            type: "u8"
          },
          {
            name: "protocol_fee_recipients",
            docs: ["Addresses of the protocol fee recipients"],
            type: {
              array: ["pubkey", 8]
            }
          },
          {
            name: "coin_creator_fee_basis_points",
            docs: ["The coin creator fee in basis points (0.01%)"],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "Pool",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_bump",
            type: "u8"
          },
          {
            name: "index",
            type: "u16"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "quote_mint",
            type: "pubkey"
          },
          {
            name: "lp_mint",
            type: "pubkey"
          },
          {
            name: "pool_base_token_account",
            type: "pubkey"
          },
          {
            name: "pool_quote_token_account",
            type: "pubkey"
          },
          {
            name: "lp_supply",
            docs: ["True circulating supply without burns and lock-ups"],
            type: "u64"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "SellEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "base_amount_in",
            type: "u64"
          },
          {
            name: "min_quote_amount_out",
            type: "u64"
          },
          {
            name: "user_base_token_reserves",
            type: "u64"
          },
          {
            name: "user_quote_token_reserves",
            type: "u64"
          },
          {
            name: "pool_base_token_reserves",
            type: "u64"
          },
          {
            name: "pool_quote_token_reserves",
            type: "u64"
          },
          {
            name: "quote_amount_out",
            type: "u64"
          },
          {
            name: "lp_fee_basis_points",
            type: "u64"
          },
          {
            name: "lp_fee",
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee",
            type: "u64"
          },
          {
            name: "quote_amount_out_without_lp_fee",
            type: "u64"
          },
          {
            name: "user_quote_amount_out",
            type: "u64"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "protocol_fee_recipient",
            type: "pubkey"
          },
          {
            name: "protocol_fee_recipient_token_account",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          },
          {
            name: "coin_creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "coin_creator_fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "SetBondingCurveCoinCreatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "bonding_curve",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "SetMetaplexCoinCreatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "metadata",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "UpdateAdminEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "new_admin",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "UpdateFeeConfigEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "lp_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee_recipients",
            type: {
              array: ["pubkey", 8]
            }
          },
          {
            name: "coin_creator_fee_basis_points",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "WithdrawEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "lp_token_amount_in",
            type: "u64"
          },
          {
            name: "min_base_amount_out",
            type: "u64"
          },
          {
            name: "min_quote_amount_out",
            type: "u64"
          },
          {
            name: "user_base_token_reserves",
            type: "u64"
          },
          {
            name: "user_quote_token_reserves",
            type: "u64"
          },
          {
            name: "pool_base_token_reserves",
            type: "u64"
          },
          {
            name: "pool_quote_token_reserves",
            type: "u64"
          },
          {
            name: "base_amount_out",
            type: "u64"
          },
          {
            name: "quote_amount_out",
            type: "u64"
          },
          {
            name: "lp_mint_supply",
            type: "u64"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "user_pool_token_account",
            type: "pubkey"
          }
        ]
      }
    }
  ]
};

// src/sdk/util.ts
function ceilDiv(a, b) {
  if (b.isZero()) {
    throw new Error("Cannot divide by zero.");
  }
  return a.add(b.subn(1)).div(b);
}
function fee(amount, basisPoints) {
  return ceilDiv(amount.mul(basisPoints), new import_bn4.default(1e4));
}
function getPumpAmmProgram(connection, programId = PUMP_AMM_PROGRAM_ID) {
  const pumpAmmIdlAddressOverride = { ...pump_amm_default };
  pumpAmmIdlAddressOverride.address = programId;
  return new import_anchor.Program(
    pumpAmmIdlAddressOverride,
    new import_anchor.AnchorProvider(connection, null, {})
  );
}

// src/sdk/buy.ts
var import_web32 = require("@solana/web3.js");
function buyBaseInputInternal(base, slippage, baseReserve, quoteReserve, lpFeeBps, protocolFeeBps, coinCreatorFeeBps, coinCreator) {
  if (baseReserve.isZero() || quoteReserve.isZero()) {
    throw new Error(
      "Invalid input: 'baseReserve' or 'quoteReserve' cannot be zero."
    );
  }
  if (base.gt(baseReserve)) {
    throw new Error("Cannot buy more base tokens than the pool reserves.");
  }
  const numerator = quoteReserve.mul(base);
  const denominator = baseReserve.sub(base);
  if (denominator.isZero()) {
    throw new Error("Pool would be depleted; denominator is zero.");
  }
  const quoteAmountIn = ceilDiv(numerator, denominator);
  const lpFee = fee(quoteAmountIn, lpFeeBps);
  const protocolFee = fee(quoteAmountIn, protocolFeeBps);
  const coinCreatorFee = import_web32.PublicKey.default.equals(coinCreator) ? new import_bn5.default(0) : fee(quoteAmountIn, coinCreatorFeeBps);
  const totalQuote = quoteAmountIn.add(lpFee).add(protocolFee).add(coinCreatorFee);
  const precision = new import_bn5.default(1e9);
  const slippageFactorFloat = (1 + slippage / 100) * 1e9;
  const slippageFactor = new import_bn5.default(Math.floor(slippageFactorFloat));
  const maxQuote = totalQuote.mul(slippageFactor).div(precision);
  return {
    internalQuoteAmount: quoteAmountIn,
    uiQuote: totalQuote,
    // Final total quote after fees
    maxQuote
  };
}
function buyQuoteInputInternal(quote, slippage, baseReserve, quoteReserve, lpFeeBps, protocolFeeBps, coinCreatorFeeBps, coinCreator) {
  if (baseReserve.isZero() || quoteReserve.isZero()) {
    throw new Error(
      "Invalid input: 'baseReserve' or 'quoteReserve' cannot be zero."
    );
  }
  const totalFeeBps = lpFeeBps.add(protocolFeeBps).add(import_web32.PublicKey.default.equals(coinCreator) ? new import_bn5.default(0) : coinCreatorFeeBps);
  const denominator = new import_bn5.default(1e4).add(totalFeeBps);
  const effectiveQuote = quote.mul(new import_bn5.default(1e4)).div(denominator);
  const numerator = baseReserve.mul(effectiveQuote);
  const denominatorEffective = quoteReserve.add(effectiveQuote);
  if (denominatorEffective.isZero()) {
    throw new Error("Pool would be depleted; denominator is zero.");
  }
  const baseAmountOut = numerator.div(denominatorEffective);
  const precision = new import_bn5.default(1e9);
  const slippageFactorFloat = (1 + slippage / 100) * 1e9;
  const slippageFactor = new import_bn5.default(Math.floor(slippageFactorFloat));
  const maxQuote = quote.mul(slippageFactor).div(precision);
  return {
    base: baseAmountOut,
    // Base tokens received after fees
    internalQuoteWithoutFees: effectiveQuote,
    maxQuote
    // Maximum quote tokens to pay (with slippage)
  };
}

// src/sdk/sell.ts
var import_bn6 = __toESM(require("bn.js"));
var import_web33 = require("@solana/web3.js");
function sellBaseInputInternal(base, slippage, baseReserve, quoteReserve, lpFeeBps, protocolFeeBps, coinCreatorFeeBps, coinCreator) {
  if (baseReserve.isZero() || quoteReserve.isZero()) {
    throw new Error(
      "Invalid input: 'baseReserve' or 'quoteReserve' cannot be zero."
    );
  }
  const quoteAmountOut = quoteReserve.mul(base).div(baseReserve.add(base));
  const lpFee = fee(quoteAmountOut, lpFeeBps);
  const protocolFee = fee(quoteAmountOut, protocolFeeBps);
  const coinCreatorFee = import_web33.PublicKey.default.equals(coinCreator) ? new import_bn6.default(0) : fee(quoteAmountOut, coinCreatorFeeBps);
  const finalQuote = quoteAmountOut.sub(lpFee).sub(protocolFee).sub(coinCreatorFee);
  if (finalQuote.isNeg()) {
    throw new Error("Fees exceed total output; final quote is negative.");
  }
  const precision = new import_bn6.default(1e9);
  const slippageFactorFloat = (1 - slippage / 100) * 1e9;
  const slippageFactor = new import_bn6.default(Math.floor(slippageFactorFloat));
  const minQuote = finalQuote.mul(slippageFactor).div(precision);
  return {
    uiQuote: finalQuote,
    // actual tokens user receives after fees
    minQuote,
    // minimum acceptable tokens after applying slippage
    internalQuoteAmountOut: quoteAmountOut
  };
}
var MAX_FEE_BASIS_POINTS = new import_bn6.default(1e4);
function calculateQuoteAmountOut(userQuoteAmountOut, lpFeeBasisPoints, protocolFeeBasisPoints, coinCreatorFeeBasisPoints) {
  const totalFeeBasisPoints = lpFeeBasisPoints.add(protocolFeeBasisPoints).add(coinCreatorFeeBasisPoints);
  const denominator = MAX_FEE_BASIS_POINTS.sub(totalFeeBasisPoints);
  return ceilDiv(userQuoteAmountOut.mul(MAX_FEE_BASIS_POINTS), denominator);
}
function sellQuoteInputInternal(quote, slippage, baseReserve, quoteReserve, lpFeeBps, protocolFeeBps, coinCreatorFeeBps, coinCreator) {
  if (baseReserve.isZero() || quoteReserve.isZero()) {
    throw new Error(
      "Invalid input: 'baseReserve' or 'quoteReserve' cannot be zero."
    );
  }
  if (quote.gt(quoteReserve)) {
    throw new Error(
      "Cannot receive more quote tokens than the pool quote reserves."
    );
  }
  const rawQuote = calculateQuoteAmountOut(
    quote,
    lpFeeBps,
    protocolFeeBps,
    import_web33.PublicKey.default.equals(coinCreator) ? new import_bn6.default(0) : coinCreatorFeeBps
  );
  if (rawQuote.gte(quoteReserve)) {
    throw new Error(
      "Invalid input: Desired quote amount exceeds available reserve."
    );
  }
  const baseAmountIn = ceilDiv(
    baseReserve.mul(rawQuote),
    quoteReserve.sub(rawQuote)
  );
  const precision = new import_bn6.default(1e9);
  const slippageFactorFloat = (1 - slippage / 100) * 1e9;
  const slippageFactor = new import_bn6.default(Math.floor(slippageFactorFloat));
  const minQuote = quote.mul(slippageFactor).div(precision);
  return {
    internalRawQuote: rawQuote,
    base: baseAmountIn,
    // amount of base tokens required to get the desired quote
    minQuote
    // minimum acceptable tokens after applying slippage
  };
}

// src/sdk/pumpAmmInternal.ts
var POOL_ACCOUNT_NEW_SIZE = 300;
var PumpAmmInternalSdk = class {
  constructor(connection, programId = PUMP_AMM_PROGRAM_ID) {
    this.connection = connection;
    this.program = getPumpAmmProgram(connection, programId);
    this.globalConfig = globalConfigPda(this.program.programId)[0];
  }
  coder() {
    return this.program.coder;
  }
  programId() {
    return this.program.programId;
  }
  globalConfigKey() {
    return this.globalConfig;
  }
  poolKey(index, creator, baseMint, quoteMint) {
    return poolPda(index, creator, baseMint, quoteMint, this.program.programId);
  }
  lpMintKey(pool) {
    return lpMintPda(pool, this.program.programId);
  }
  fetchGlobalConfigAccount() {
    return this.program.account.globalConfig.fetch(this.globalConfig);
  }
  fetchPool(pool) {
    return this.program.account.pool.fetch(pool);
  }
  async createPoolInstructionsInternal(index, creator, baseMint, quoteMint, baseIn, quoteIn, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    const [baseTokenProgram, quoteTokenProgram] = await this.getMintTokenPrograms(baseMint, quoteMint);
    if (userBaseTokenAccount === void 0) {
      userBaseTokenAccount = (0, import_spl_token2.getAssociatedTokenAddressSync)(
        baseMint,
        creator,
        true,
        baseTokenProgram
      );
    }
    if (userQuoteTokenAccount === void 0) {
      userQuoteTokenAccount = (0, import_spl_token2.getAssociatedTokenAddressSync)(
        quoteMint,
        creator,
        true,
        quoteTokenProgram
      );
    }
    return await this.withWsolAccounts(
      creator,
      baseMint,
      userBaseTokenAccount,
      baseIn,
      quoteMint,
      userQuoteTokenAccount,
      quoteIn,
      async () => {
        const [pool] = poolPda(
          index,
          creator,
          baseMint,
          quoteMint,
          this.program.programId
        );
        const instructions = [];
        const poolBaseTokenAccountPDA = (0, import_spl_token2.getAssociatedTokenAddressSync)(
          baseMint,
          pool,
          true,
          baseTokenProgram
        );
        if (!await this.accountExists(poolBaseTokenAccountPDA)) {
          instructions.push(
            (0, import_spl_token2.createAssociatedTokenAccountIdempotentInstruction)(
              creator,
              poolBaseTokenAccountPDA,
              pool,
              baseMint,
              baseTokenProgram
            )
          );
        }
        const poolQuoteTokenAccountPDA = (0, import_spl_token2.getAssociatedTokenAddressSync)(
          quoteMint,
          pool,
          true,
          quoteTokenProgram
        );
        if (!await this.accountExists(poolQuoteTokenAccountPDA)) {
          instructions.push(
            (0, import_spl_token2.createAssociatedTokenAccountIdempotentInstruction)(
              creator,
              poolQuoteTokenAccountPDA,
              pool,
              quoteMint,
              quoteTokenProgram
            )
          );
        }
        instructions.push(
          await this.program.methods.createPool(index, baseIn, quoteIn, import_web34.SystemProgram.programId).accountsPartial({
            globalConfig: this.globalConfig,
            baseMint,
            quoteMint,
            creator,
            userBaseTokenAccount,
            userQuoteTokenAccount,
            baseTokenProgram,
            quoteTokenProgram
          }).instruction()
        );
        return instructions;
      }
    );
  }
  async depositInstructionsInternal(pool, lpToken, maxBase, maxQuote, user, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0, userPoolTokenAccount = void 0) {
    const poolAccountInfo = await this.connection.getAccountInfo(pool);
    const poolData = this.program.coder.accounts.decode(
      "pool",
      poolAccountInfo.data
    );
    const { baseMint, quoteMint, lpMint } = poolData;
    const [baseTokenProgram, quoteTokenProgram] = await this.getMintTokenPrograms(baseMint, quoteMint);
    const liquidityAccounts = await this.liquidityAccounts(
      pool,
      poolData,
      baseTokenProgram,
      quoteTokenProgram,
      user,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      userPoolTokenAccount
    );
    return await this.withFixPoolInstructions(
      pool,
      poolAccountInfo,
      user,
      async () => {
        return await this.withWsolAccounts(
          user,
          baseMint,
          liquidityAccounts.userBaseTokenAccount,
          maxBase,
          quoteMint,
          liquidityAccounts.userQuoteTokenAccount,
          maxQuote,
          async () => {
            const instructions = [];
            if (!await this.accountExists(
              liquidityAccounts.userPoolTokenAccount
            )) {
              instructions.push(
                (0, import_spl_token2.createAssociatedTokenAccountIdempotentInstruction)(
                  user,
                  liquidityAccounts.userPoolTokenAccount,
                  user,
                  lpMint,
                  import_spl_token2.TOKEN_2022_PROGRAM_ID
                )
              );
            }
            instructions.push(
              await this.program.methods.deposit(lpToken, maxBase, maxQuote).accountsPartial(liquidityAccounts).instruction()
            );
            return instructions;
          }
        );
      }
    );
  }
  async withWsolAccounts(user, baseMint, userBaseAta, baseAmount, quoteMint, userQuoteAta, quoteAmount, block) {
    return await this.withWsolAccount(
      user,
      user,
      baseMint,
      userBaseAta,
      baseAmount,
      () => this.withWsolAccount(
        user,
        user,
        quoteMint,
        userQuoteAta,
        quoteAmount,
        block
      )
    );
  }
  async withWsolAccount(payer, user, mint, ata, amount, block, closeWsolAccount = true) {
    const instructions = [];
    if (mint.equals(import_spl_token2.NATIVE_MINT)) {
      if (!await this.accountExists(ata)) {
        instructions.push(
          (0, import_spl_token2.createAssociatedTokenAccountIdempotentInstruction)(
            payer,
            ata,
            user,
            import_spl_token2.NATIVE_MINT
          )
        );
      }
      if (amount.gtn(0)) {
        instructions.push(
          import_web34.SystemProgram.transfer({
            fromPubkey: user,
            toPubkey: ata,
            lamports: BigInt(amount.toString())
          }),
          (0, import_spl_token2.createSyncNativeInstruction)(ata)
        );
      }
    }
    const blockInstructions = await block();
    instructions.push(...blockInstructions);
    if (mint.equals(import_spl_token2.NATIVE_MINT) && closeWsolAccount) {
      instructions.push(
        (0, import_spl_token2.createCloseAccountInstruction)(
          ata,
          user,
          user,
          void 0,
          import_spl_token2.TOKEN_PROGRAM_ID
        )
      );
    }
    return instructions;
  }
  async accountExists(account) {
    const accountInfo = await this.connection.getAccountInfo(account);
    return accountInfo !== null && !accountInfo.owner.equals(import_web34.SystemProgram.programId);
  }
  async depositBaseInputInternal(pool, base, slippage) {
    const { fetchedPool, poolBaseAmount, poolQuoteAmount } = await this.getPoolBaseAndQuoteAmounts(pool);
    const { token1, lpToken, maxToken0, maxToken1 } = depositToken0Internal(
      base,
      slippage,
      poolBaseAmount,
      poolQuoteAmount,
      fetchedPool.lpSupply
    );
    return {
      quote: token1,
      lpToken,
      maxBase: maxToken0,
      maxQuote: maxToken1
    };
  }
  async depositQuoteInputInternal(pool, quote, slippage) {
    const { fetchedPool, poolBaseAmount, poolQuoteAmount } = await this.getPoolBaseAndQuoteAmounts(pool);
    const { token1, lpToken, maxToken0, maxToken1 } = depositToken0Internal(
      quote,
      slippage,
      poolQuoteAmount,
      poolBaseAmount,
      fetchedPool.lpSupply
    );
    return {
      base: token1,
      lpToken,
      maxBase: maxToken1,
      maxQuote: maxToken0
    };
  }
  async withdrawInstructionsInternal(pool, lpTokenAmountIn, minBaseAmountOut, minQuoteAmountOut, user, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0, userPoolTokenAccount = void 0) {
    const poolAccountInfo = await this.connection.getAccountInfo(pool);
    const poolData = this.program.coder.accounts.decode(
      "pool",
      poolAccountInfo.data
    );
    const { baseMint, quoteMint } = poolData;
    const [baseTokenProgram, quoteTokenProgram] = await this.getMintTokenPrograms(baseMint, quoteMint);
    const liquidityAccounts = await this.liquidityAccounts(
      pool,
      poolData,
      baseTokenProgram,
      quoteTokenProgram,
      user,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      userPoolTokenAccount
    );
    return await this.withFixPoolInstructions(
      pool,
      poolAccountInfo,
      user,
      async () => {
        const instructions = [];
        let baseWsolAtaCreated = false;
        if (!await this.accountExists(liquidityAccounts.userBaseTokenAccount)) {
          instructions.push(
            (0, import_spl_token2.createAssociatedTokenAccountIdempotentInstruction)(
              user,
              liquidityAccounts.userBaseTokenAccount,
              user,
              liquidityAccounts.baseMint,
              baseTokenProgram
            )
          );
          if (baseMint.equals(import_spl_token2.NATIVE_MINT)) {
            baseWsolAtaCreated = true;
          }
        }
        let quoteWsolAtaCreated = false;
        if (!await this.accountExists(liquidityAccounts.userQuoteTokenAccount)) {
          instructions.push(
            (0, import_spl_token2.createAssociatedTokenAccountIdempotentInstruction)(
              user,
              liquidityAccounts.userQuoteTokenAccount,
              user,
              liquidityAccounts.quoteMint,
              quoteTokenProgram
            )
          );
          if (quoteMint.equals(import_spl_token2.NATIVE_MINT)) {
            quoteWsolAtaCreated = true;
          }
        }
        instructions.push(
          await this.program.methods.withdraw(lpTokenAmountIn, minBaseAmountOut, minQuoteAmountOut).accountsPartial(liquidityAccounts).instruction()
        );
        if (baseWsolAtaCreated) {
          instructions.push(
            (0, import_spl_token2.createCloseAccountInstruction)(
              liquidityAccounts.userBaseTokenAccount,
              user,
              user,
              void 0,
              import_spl_token2.TOKEN_PROGRAM_ID
            )
          );
        }
        if (quoteWsolAtaCreated) {
          instructions.push(
            (0, import_spl_token2.createCloseAccountInstruction)(
              liquidityAccounts.userQuoteTokenAccount,
              user,
              user,
              void 0,
              import_spl_token2.TOKEN_PROGRAM_ID
            )
          );
        }
        return instructions;
      }
    );
  }
  async withdrawInputsInternal(pool, lpAmount, slippage) {
    const { fetchedPool, poolBaseAmount, poolQuoteAmount } = await this.getPoolBaseAndQuoteAmounts(pool);
    return withdrawInternal(
      lpAmount,
      slippage,
      poolBaseAmount,
      poolQuoteAmount,
      fetchedPool.lpSupply
    );
  }
  async getPoolBaseAndQuoteAmounts(pool) {
    const fetchedPool = await this.fetchPool(pool);
    const [baseTokenProgram, quoteTokenProgram] = await this.getMintTokenPrograms(
      fetchedPool.baseMint,
      fetchedPool.quoteMint
    );
    const poolBaseTokenAccount = await (0, import_spl_token2.getAccount)(
      this.connection,
      fetchedPool.poolBaseTokenAccount,
      void 0,
      baseTokenProgram
    );
    const poolQuoteTokenAccount = await (0, import_spl_token2.getAccount)(
      this.connection,
      fetchedPool.poolQuoteTokenAccount,
      void 0,
      quoteTokenProgram
    );
    const poolBaseAmount = new import_bn7.default(poolBaseTokenAccount.amount.toString());
    const poolQuoteAmount = new import_bn7.default(poolQuoteTokenAccount.amount.toString());
    return { fetchedPool, poolBaseAmount, poolQuoteAmount };
  }
  async liquidityAccounts(pool, {
    baseMint,
    quoteMint,
    lpMint,
    poolBaseTokenAccount,
    poolQuoteTokenAccount
  }, baseTokenProgram, quoteTokenProgram, user, userBaseTokenAccount, userQuoteTokenAccount, userPoolTokenAccount) {
    if (userBaseTokenAccount === void 0) {
      userBaseTokenAccount = (0, import_spl_token2.getAssociatedTokenAddressSync)(
        baseMint,
        user,
        true,
        baseTokenProgram
      );
    }
    if (userQuoteTokenAccount === void 0) {
      userQuoteTokenAccount = (0, import_spl_token2.getAssociatedTokenAddressSync)(
        quoteMint,
        user,
        true,
        quoteTokenProgram
      );
    }
    if (userPoolTokenAccount === void 0) {
      userPoolTokenAccount = (0, import_spl_token2.getAssociatedTokenAddressSync)(
        lpMint,
        user,
        true,
        import_spl_token2.TOKEN_2022_PROGRAM_ID
      );
    }
    return {
      pool,
      globalConfig: this.globalConfig,
      user,
      baseMint,
      quoteMint,
      lpMint,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      userPoolTokenAccount,
      poolBaseTokenAccount,
      poolQuoteTokenAccount
    };
  }
  async buyInstructionsInternal(pool, baseOut, maxQuoteIn, user, protocolFeeRecipient = void 0, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    const poolAccountInfo = await this.connection.getAccountInfo(pool);
    const poolData = this.program.coder.accounts.decode(
      "pool",
      poolAccountInfo.data
    );
    const { index, creator, baseMint, quoteMint, coinCreator } = poolData;
    return await this.withFixPoolInstructions(
      pool,
      poolAccountInfo,
      user,
      async () => {
        return await this.buyInstructionsInternalNoPool(
          index,
          creator,
          baseMint,
          quoteMint,
          baseOut,
          maxQuoteIn,
          user,
          coinCreator,
          protocolFeeRecipient,
          userBaseTokenAccount,
          userQuoteTokenAccount
        );
      }
    );
  }
  async buyInstructionsInternalNoPool(index, creator, baseMint, quoteMint, baseOut, maxQuoteIn, user, coinCreator, protocolFeeRecipient = void 0, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    const [pool] = this.poolKey(index, creator, baseMint, quoteMint);
    const swapAccounts = await this.swapAccounts(
      pool,
      baseMint,
      quoteMint,
      user,
      coinCreator,
      protocolFeeRecipient,
      userBaseTokenAccount,
      userQuoteTokenAccount
    );
    return this.withWsolAccount(
      user,
      user,
      quoteMint,
      swapAccounts.userQuoteTokenAccount,
      maxQuoteIn,
      async () => {
        const instructions = [];
        let baseWsolAtaCreated = false;
        if (!await this.accountExists(swapAccounts.userBaseTokenAccount)) {
          instructions.push(
            (0, import_spl_token2.createAssociatedTokenAccountIdempotentInstruction)(
              user,
              swapAccounts.userBaseTokenAccount,
              user,
              swapAccounts.baseMint,
              swapAccounts.baseTokenProgram
            )
          );
          if (baseMint.equals(import_spl_token2.NATIVE_MINT)) {
            baseWsolAtaCreated = true;
          }
        }
        instructions.push(
          await this.program.methods.buy(baseOut, maxQuoteIn).accountsPartial(swapAccounts).instruction()
        );
        if (baseWsolAtaCreated) {
          instructions.push(
            (0, import_spl_token2.createCloseAccountInstruction)(
              swapAccounts.userBaseTokenAccount,
              user,
              user,
              void 0,
              import_spl_token2.TOKEN_PROGRAM_ID
            )
          );
        }
        return instructions;
      }
    );
  }
  async buyBaseInput(pool, base, slippage, user, protocolFeeRecipient = void 0, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    const { maxQuote } = await this.buyBaseInputInternal(pool, base, slippage);
    return this.buyInstructionsInternal(
      pool,
      base,
      maxQuote,
      user,
      protocolFeeRecipient,
      userBaseTokenAccount,
      userQuoteTokenAccount
    );
  }
  async buyQuoteInput(pool, quote, slippage, user, protocolFeeRecipient = void 0, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    const { base, maxQuote } = await this.buyQuoteInputInternal(
      pool,
      quote,
      slippage
    );
    return this.buyInstructionsInternal(
      pool,
      base,
      maxQuote,
      user,
      protocolFeeRecipient,
      userBaseTokenAccount,
      userQuoteTokenAccount
    );
  }
  async buyAutocompleteQuoteFromBase(pool, base, slippage) {
    const { uiQuote } = await this.buyBaseInputInternal(pool, base, slippage);
    return uiQuote;
  }
  async buyAutocompleteBaseFromQuote(pool, quote, slippage) {
    const { base } = await this.buyQuoteInputInternal(pool, quote, slippage);
    return base;
  }
  async buyBaseInputInternal(pool, base, slippage) {
    const { fetchedPool, poolBaseAmount, poolQuoteAmount } = await this.getPoolBaseAndQuoteAmounts(pool);
    const globalConfig = await this.fetchGlobalConfigAccount();
    return buyBaseInputInternal(
      base,
      slippage,
      poolBaseAmount,
      poolQuoteAmount,
      globalConfig.lpFeeBasisPoints,
      globalConfig.protocolFeeBasisPoints,
      globalConfig.coinCreatorFeeBasisPoints,
      fetchedPool.coinCreator
    );
  }
  async buyQuoteInputInternal(pool, quote, slippage) {
    const { fetchedPool, poolBaseAmount, poolQuoteAmount } = await this.getPoolBaseAndQuoteAmounts(pool);
    return this.buyQuoteInputInternalNoPool(
      quote,
      slippage,
      poolBaseAmount,
      poolQuoteAmount,
      fetchedPool.coinCreator
    );
  }
  async buyQuoteInputInternalNoPool(quote, slippage, poolBaseAmount, poolQuoteAmount, coinCreator) {
    const globalConfig = await this.fetchGlobalConfigAccount();
    return buyQuoteInputInternal(
      quote,
      slippage,
      poolBaseAmount,
      poolQuoteAmount,
      globalConfig.lpFeeBasisPoints,
      globalConfig.protocolFeeBasisPoints,
      globalConfig.coinCreatorFeeBasisPoints,
      coinCreator
    );
  }
  async sellInstructionsInternal(pool, baseAmountIn, minQuoteAmountOut, user, protocolFeeRecipient = void 0, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    const poolAccountInfo = await this.connection.getAccountInfo(pool);
    const poolData = this.program.coder.accounts.decode(
      "pool",
      poolAccountInfo.data
    );
    const { index, creator, baseMint, quoteMint, coinCreator } = poolData;
    return await this.withFixPoolInstructions(
      pool,
      poolAccountInfo,
      user,
      async () => {
        return await this.sellInstructionsInternalNoPool(
          index,
          creator,
          baseMint,
          quoteMint,
          baseAmountIn,
          minQuoteAmountOut,
          user,
          coinCreator,
          protocolFeeRecipient,
          userBaseTokenAccount,
          userQuoteTokenAccount
        );
      }
    );
  }
  async fixPoolInstructions(pool, user) {
    const poolAccountInfo = await this.connection.getAccountInfo(pool);
    return await this.withFixPoolInstructions(
      pool,
      poolAccountInfo,
      user,
      async () => []
    );
  }
  async withFixPoolInstructions(pool, poolAccountInfo, user, block) {
    const instructions = [];
    if (poolAccountInfo === null || poolAccountInfo.data.length < POOL_ACCOUNT_NEW_SIZE) {
      instructions.push(
        await this.program.methods.extendAccount().accountsPartial({
          account: pool,
          user
        }).instruction()
      );
    }
    return [...instructions, ...await block()];
  }
  async sellInstructionsInternalNoPool(index, creator, baseMint, quoteMint, baseAmountIn, minQuoteAmountOut, user, coinCreator, protocolFeeRecipient = void 0, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    const [pool] = this.poolKey(index, creator, baseMint, quoteMint);
    const swapAccounts = await this.swapAccounts(
      pool,
      baseMint,
      quoteMint,
      user,
      coinCreator,
      protocolFeeRecipient,
      userBaseTokenAccount,
      userQuoteTokenAccount
    );
    return this.withWsolAccount(
      user,
      user,
      baseMint,
      swapAccounts.userBaseTokenAccount,
      baseAmountIn,
      async () => {
        const instructions = [];
        let quoteWsolAtaCreated = false;
        if (!await this.accountExists(swapAccounts.userQuoteTokenAccount)) {
          instructions.push(
            (0, import_spl_token2.createAssociatedTokenAccountIdempotentInstruction)(
              user,
              swapAccounts.userQuoteTokenAccount,
              user,
              swapAccounts.quoteMint,
              swapAccounts.quoteTokenProgram
            )
          );
          if (quoteMint.equals(import_spl_token2.NATIVE_MINT)) {
            quoteWsolAtaCreated = true;
          }
        }
        instructions.push(
          await this.program.methods.sell(baseAmountIn, minQuoteAmountOut).accountsPartial(swapAccounts).instruction()
        );
        if (quoteWsolAtaCreated) {
          instructions.push(
            (0, import_spl_token2.createCloseAccountInstruction)(
              swapAccounts.userQuoteTokenAccount,
              user,
              user,
              void 0,
              import_spl_token2.TOKEN_PROGRAM_ID
            )
          );
        }
        return instructions;
      }
    );
  }
  async sellBaseInput(pool, base, slippage, user, protocolFeeRecipient = void 0, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    const { minQuote } = await this.sellBaseInputInternal(pool, base, slippage);
    return this.sellInstructionsInternal(
      pool,
      base,
      minQuote,
      user,
      protocolFeeRecipient,
      userBaseTokenAccount,
      userQuoteTokenAccount
    );
  }
  async sellQuoteInput(pool, quote, slippage, user, protocolFeeRecipient = void 0, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    const { base, minQuote } = await this.sellQuoteInputInternal(
      pool,
      quote,
      slippage
    );
    return this.sellInstructionsInternal(
      pool,
      base,
      minQuote,
      user,
      protocolFeeRecipient,
      userBaseTokenAccount,
      userQuoteTokenAccount
    );
  }
  async sellAutocompleteQuoteFromBase(pool, base, slippage) {
    const { uiQuote } = await this.sellBaseInputInternal(pool, base, slippage);
    return uiQuote;
  }
  async sellAutocompleteBaseFromQuote(pool, quote, slippage) {
    const { base } = await this.sellQuoteInputInternal(pool, quote, slippage);
    return base;
  }
  async sellBaseInputInternal(pool, base, slippage) {
    const { fetchedPool, poolBaseAmount, poolQuoteAmount } = await this.getPoolBaseAndQuoteAmounts(pool);
    return this.sellBaseInputInternalNoPool(
      base,
      slippage,
      poolBaseAmount,
      poolQuoteAmount,
      fetchedPool.coinCreator
    );
  }
  async sellBaseInputInternalNoPool(base, slippage, poolBaseAmount, poolQuoteAmount, coinCreator) {
    const globalConfig = await this.fetchGlobalConfigAccount();
    return sellBaseInputInternal(
      base,
      slippage,
      poolBaseAmount,
      poolQuoteAmount,
      globalConfig.lpFeeBasisPoints,
      globalConfig.protocolFeeBasisPoints,
      globalConfig.coinCreatorFeeBasisPoints,
      coinCreator
    );
  }
  async sellQuoteInputInternal(pool, quote, slippage) {
    const { fetchedPool, poolBaseAmount, poolQuoteAmount } = await this.getPoolBaseAndQuoteAmounts(pool);
    const globalConfig = await this.fetchGlobalConfigAccount();
    return sellQuoteInputInternal(
      quote,
      slippage,
      poolBaseAmount,
      poolQuoteAmount,
      globalConfig.lpFeeBasisPoints,
      globalConfig.protocolFeeBasisPoints,
      globalConfig.coinCreatorFeeBasisPoints,
      fetchedPool.coinCreator
    );
  }
  async extendAccount(account, user) {
    return this.program.methods.extendAccount().accountsPartial({
      account,
      user
    }).instruction();
  }
  async collectCoinCreatorFee(coinCreator, coinCreatorTokenAccount = void 0) {
    const quoteMint = import_spl_token2.NATIVE_MINT;
    const quoteTokenProgram = import_spl_token2.TOKEN_PROGRAM_ID;
    let coinCreatorVaultAuthority = this.coinCreatorVaultAuthorityPda(coinCreator);
    return await this.withWsolAccount(
      coinCreator,
      coinCreatorVaultAuthority,
      quoteMint,
      this.coinCreatorVaultAta(
        coinCreatorVaultAuthority,
        quoteMint,
        quoteTokenProgram
      ),
      new import_bn7.default(0),
      async () => {
        if (coinCreatorTokenAccount === void 0) {
          coinCreatorTokenAccount = (0, import_spl_token2.getAssociatedTokenAddressSync)(
            quoteMint,
            coinCreator,
            true,
            quoteTokenProgram
          );
        }
        return await this.withWsolAccount(
          coinCreator,
          coinCreator,
          quoteMint,
          coinCreatorTokenAccount,
          new import_bn7.default(0),
          async () => {
            return [
              await this.program.methods.collectCoinCreatorFee().accountsPartial({
                coinCreator,
                coinCreatorTokenAccount,
                quoteMint,
                quoteTokenProgram
              }).instruction()
            ];
          }
        );
      },
      false
    );
  }
  async getCoinCreatorVaultBalance(coinCreator) {
    const quoteMint = import_spl_token2.NATIVE_MINT;
    const quoteTokenProgram = import_spl_token2.TOKEN_PROGRAM_ID;
    const coinCreatorVaultAuthority = this.coinCreatorVaultAuthorityPda(coinCreator);
    const coinCreatorVaultAta = this.coinCreatorVaultAta(
      coinCreatorVaultAuthority,
      quoteMint,
      quoteTokenProgram
    );
    try {
      const tokenAccount = await (0, import_spl_token2.getAccount)(
        this.connection,
        coinCreatorVaultAta,
        void 0,
        quoteTokenProgram
      );
      return new import_bn7.default(tokenAccount.amount.toString());
    } catch (e) {
      console.error(`Error fetching token account ${coinCreatorVaultAta}:`, e);
      return new import_bn7.default(0);
    }
  }
  async setCoinCreator(pool) {
    return this.program.methods.setCoinCreator().accountsPartial({
      pool
    }).instruction();
  }
  async swapAccounts(pool, baseMint, quoteMint, user, coinCreator, protocolFeeRecipient, userBaseTokenAccount, userQuoteTokenAccount) {
    if (protocolFeeRecipient === void 0) {
      const { protocolFeeRecipients } = await this.fetchGlobalConfigAccount();
      protocolFeeRecipient = protocolFeeRecipients[Math.floor(Math.random() * protocolFeeRecipients.length)];
    }
    const [baseTokenProgram, quoteTokenProgram] = await this.getMintTokenPrograms(baseMint, quoteMint);
    if (userBaseTokenAccount === void 0) {
      userBaseTokenAccount = (0, import_spl_token2.getAssociatedTokenAddressSync)(
        baseMint,
        user,
        true,
        baseTokenProgram
      );
    }
    if (userQuoteTokenAccount === void 0) {
      userQuoteTokenAccount = (0, import_spl_token2.getAssociatedTokenAddressSync)(
        quoteMint,
        user,
        true,
        quoteTokenProgram
      );
    }
    const coinCreatorVaultAuthority = this.coinCreatorVaultAuthorityPda(coinCreator);
    return {
      pool,
      globalConfig: this.globalConfig,
      user,
      baseMint,
      quoteMint,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      poolBaseTokenAccount: (0, import_spl_token2.getAssociatedTokenAddressSync)(
        baseMint,
        pool,
        true,
        baseTokenProgram
      ),
      poolQuoteTokenAccount: (0, import_spl_token2.getAssociatedTokenAddressSync)(
        quoteMint,
        pool,
        true,
        quoteTokenProgram
      ),
      protocolFeeRecipient,
      baseTokenProgram,
      quoteTokenProgram,
      coinCreatorVaultAta: this.coinCreatorVaultAta(
        coinCreatorVaultAuthority,
        quoteMint,
        quoteTokenProgram
      ),
      coinCreatorVaultAuthority
    };
  }
  coinCreatorVaultAuthorityPda(coinCreator) {
    const [coinCreatorVaultAuthority] = import_web34.PublicKey.findProgramAddressSync(
      [Buffer.from("creator_vault"), coinCreator.toBuffer()],
      this.programId()
    );
    return coinCreatorVaultAuthority;
  }
  coinCreatorVaultAta(coinCreatorVaultAuthority, quoteMint, quoteTokenProgram) {
    return (0, import_spl_token2.getAssociatedTokenAddressSync)(
      quoteMint,
      coinCreatorVaultAuthority,
      true,
      quoteTokenProgram
    );
  }
  async getMintTokenPrograms(baseMint, quoteMint) {
    const baseMintAccountInfo = await this.connection.getAccountInfo(baseMint);
    if (baseMintAccountInfo === null) {
      throw new Error(`baseMint=${baseMint} not found`);
    }
    const quoteMintAccountInfo = await this.connection.getAccountInfo(quoteMint);
    if (quoteMintAccountInfo === null) {
      throw new Error(`quoteMint=${quoteMint} not found`);
    }
    return [baseMintAccountInfo.owner, quoteMintAccountInfo.owner];
  }
};
